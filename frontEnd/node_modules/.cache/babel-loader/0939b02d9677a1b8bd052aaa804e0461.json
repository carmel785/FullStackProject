{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/carmelklein/GitProjects/FullStackProject/frontEnd/src/Components/AllMembers.js\",\n    _s = $RefreshSig$();\n\nimport axios from 'axios';\nimport { UserContext } from './Contexts';\nimport { useContext, useEffect, useState } from 'react';\nimport SubscribeMovie from \"./SubscribeMovie\";\n\nconst AllMembers = () => {\n  _s();\n\n  const [members, setMembers] = useState([]);\n  const [subscriptions, setSubscriptions] = useState([]);\n  const [subClicked, setSubClicked1] = useState([]);\n  const [watchedMovies, setWatchedMovies] = useState([]);\n  const [x, setX] = useState(0);\n  const context = useContext(UserContext);\n  useEffect(() => {\n    console.log(\"All Members: \" + context); //getting the members from the Web Service\n\n    axios.get('http://localhost:4000/routingToFront/membersToClient').then(x => {\n      setMembers(x.data);\n    }); //getting the subscriptions from the Web Service(DB)\n\n    axios.get('http://localhost:4000/routingToFront/subscriptionToClient').then(x => {\n      setSubscriptions(x.data);\n    });\n  }, []);\n  useEffect(() => {\n    //create array of falses the represent the members who clicked on Subscribe for new movie\n    let falseArr = [];\n    members.map(x => {\n      falseArr.push(false);\n    });\n    setSubClicked1(falseArr);\n  }, [members]); //hook that affected by other hook need to put his get function inside the useeffect []\n  // create the watchedMovies array\n\n  useEffect(() => {\n    let movArr = [];\n    subscriptions.forEach(x => {\n      {\n        x.Movies.forEach(y => {\n          // console.log(y)\n          movArr.push({\n            movie: y.movieName,\n            id: x.MemberId\n          });\n        });\n      }\n    });\n    setWatchedMovies(movArr);\n  }, [subscriptions]); // console.log(watchedMovies)\n\n  function splitMoviesToMembers(memberId) {\n    let mWatched = [];\n    watchedMovies.forEach(movie => {\n      if (movie.id == memberId) {\n        mWatched.push(movie.movie);\n      }\n    });\n    return mWatched;\n  }\n\n  const openSubscribe = index => {\n    if (subClicked[index] == false) {\n      subClicked[index] = true;\n      setSubClicked1(subClicked);\n      setX(x + 1);\n    } else {\n      subClicked[index] = false;\n      setSubClicked1(subClicked);\n      setX(x - 1);\n    }\n\n    console.log(subClicked);\n  }; //  const subscribeVisible = (index,item) =>\n  //  {\n  //     // let arr = subClicked\n  //     // // console.log(arr)\n  //     // // return arr[index]\n  //     // return arr[index]\n  //     console.log(subClicked[index])\n  //   if(subClicked[index] === true)\n  //   {\n  //     console.log(index)\n  //     // return <SubscribeMovie index = {index} item = {item} movies = {splitMoviesToMembers(item._id)}/>\n  //   }\n  //   else{\n  //     return <SubscribeMovie index = {index} item = {item} movies = {splitMoviesToMembers(item._id)}/>\n  //     // console.log(\"fsd\")\n  //   }\n  //  }\n\n\n  const subscriptionItems = (index, item) => {\n    return subscriptions.map((item2, index2) => {\n      //  <ul key = {index}>\n      if (item._id === item2.MemberId) {\n        return item2.Movies.map((item3, index3) => {\n          // console.log(m.movieName)\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [item3.movieName, \", \", item3.date]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 15\n            }, this)\n          }, index3, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 22\n          }, this);\n        });\n      } // </ul>\n\n    });\n  };\n\n  let items = members.map((item, index) => {\n    let mWatched = [];\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w3-blue w3-hover-shadow w3-padding-32 w3-bordered w3-code\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: item.Name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 10\n      }, this), \"Email: \", item.Email, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 29\n      }, this), \"City: \", item.City, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 28\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"button\",\n        value: \"Edit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"button\",\n        value: \"Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"w3-green w3-hover-shadow w3-padding-32 w3-bordered w3-code\",\n        style: {\n          border: \"3px solid\"\n        },\n        children: [\"Movies watched \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"button\",\n          value: \"Subscribe to new movie\",\n          onClick: () => openSubscribe(index)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 10\n        }, this), console.log(subClicked[index]), subClicked[index] ? /*#__PURE__*/_jsxDEV(SubscribeMovie, {\n          index: index,\n          item: item,\n          movies: splitMoviesToMembers(item._id)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 32\n        }, this) : \"asda\", /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: subscriptionItems(index, item)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 10\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 16\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [x, items]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 159,\n    columnNumber: 8\n  }, this); // const addItem = () =>{\n  //   setItem([...item,{id: item.length}])\n  // }\n  // return(\n  //   <div>\n  //     <button onClick = {addItem}>Add number</button>\n  //     <ul>\n  //       {item.map(item => (\n  //         <li key = {item.id} >{item.id}</li>\n  //       ))}\n  //     </ul>\n  //   </div>\n  // )\n};\n\n_s(AllMembers, \"SJVqpjgkd74KCMtYOw88LkpbYMU=\");\n\n_c = AllMembers;\nexport default AllMembers;\n\nvar _c;\n\n$RefreshReg$(_c, \"AllMembers\");","map":{"version":3,"sources":["/Users/carmelklein/GitProjects/FullStackProject/frontEnd/src/Components/AllMembers.js"],"names":["axios","UserContext","useContext","useEffect","useState","SubscribeMovie","AllMembers","members","setMembers","subscriptions","setSubscriptions","subClicked","setSubClicked1","watchedMovies","setWatchedMovies","x","setX","context","console","log","get","then","data","falseArr","map","push","movArr","forEach","Movies","y","movie","movieName","id","MemberId","splitMoviesToMembers","memberId","mWatched","openSubscribe","index","subscriptionItems","item","item2","index2","_id","item3","index3","date","items","Name","Email","City","border"],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport {UserContext} from './Contexts'\nimport {useContext, useEffect, useState} from 'react'\nimport SubscribeMovie from \"./SubscribeMovie\"\nconst AllMembers  = () =>\n{\n\n    const [members,setMembers] = useState([])\n    const [subscriptions,setSubscriptions] = useState([])\n    const [subClicked, setSubClicked1] = useState([])\n    const [watchedMovies, setWatchedMovies] = useState([])\n    const [x, setX] = useState(0)\n\n\n    const context = useContext(UserContext)\n   \n    useEffect(() => {\n        console.log(\"All Members: \"+context)\n\n        //getting the members from the Web Service\n        axios.get('http://localhost:4000/routingToFront/membersToClient')\n          .then(x=>{setMembers(x.data)})\n        \n        \n        //getting the subscriptions from the Web Service(DB)\n        axios.get('http://localhost:4000/routingToFront/subscriptionToClient')\n          .then(x=>{setSubscriptions(x.data)})\n\n        \n      },[]);\n\n\n      useEffect(()=>\n      {\n        //create array of falses the represent the members who clicked on Subscribe for new movie\n        let falseArr = []\n        members.map(x=> {\n          falseArr.push(false)\n        })\n        setSubClicked1(falseArr)\n      },[members]) //hook that affected by other hook need to put his get function inside the useeffect []\n\n        // create the watchedMovies array\n        useEffect(()=>\n        {\n          let movArr = []\n          subscriptions.forEach((x)=>{\n            {\n              x.Movies.forEach((y)=>\n              {\n                // console.log(y)\n                movArr.push({movie: y.movieName, id: x.MemberId})\n              })\n            }\n              \n           })\n           setWatchedMovies(movArr)\n        },[subscriptions])\n      // console.log(watchedMovies)\n\n     \n      \n\n      function splitMoviesToMembers(memberId)\n      {\n        let mWatched = []\n         watchedMovies.forEach(movie =>\n          {\n            if(movie.id == memberId)\n            {\n              mWatched.push(movie.movie)\n            }\n          })\n          return mWatched\n      }\n       const openSubscribe = (index) =>\n       {\n        if(subClicked[index] == false)\n         {\n          subClicked[index] = true\n           setSubClicked1(subClicked)\n    setX(x+1)\n\n         }\n         else\n         {\n          subClicked[index] = false\n          setSubClicked1(subClicked)\n    setX(x-1)\n\n         }\n         console.log(subClicked)\n       }\n\n      //  const subscribeVisible = (index,item) =>\n      //  {\n      //     // let arr = subClicked\n      //     // // console.log(arr)\n      //     // // return arr[index]\n      //     // return arr[index]\n          \n      //     console.log(subClicked[index])\n      //   if(subClicked[index] === true)\n      //   {\n      //     console.log(index)\n      //     // return <SubscribeMovie index = {index} item = {item} movies = {splitMoviesToMembers(item._id)}/>\n      //   }\n      //   else{\n      //     return <SubscribeMovie index = {index} item = {item} movies = {splitMoviesToMembers(item._id)}/>\n      //     // console.log(\"fsd\")\n      //   }\n      //  }\n\n       const subscriptionItems = (index,item) =>\n       {\n         return subscriptions.map((item2,index2)=>{\n          //  <ul key = {index}>\n\n          if(item._id === item2.MemberId)\n          {\n\n            return item2.Movies.map((item3,index3)=>\n            {\n              // console.log(m.movieName)\n              return <div key = {index3}>\n              <li>{item3.movieName}, {item3.date}</li>\n              </div>\n            })\n          \n          }\n          // </ul>\n         })\n       }\n      \n      let items = members.map((item,index)=>\n      {\n        let mWatched = []\n        return <div key = {index} className=\"w3-blue w3-hover-shadow w3-padding-32 w3-bordered w3-code\">\n         <h4>{item.Name}</h4>\n         Email: {item.Email}<br/>\n         City: {item.City} <br/>\n       \n         <input type =\"button\" value = \"Edit\" />\n         <input type =\"button\" value = \"Delete\"/>\n         <div className=\"w3-green w3-hover-shadow w3-padding-32 w3-bordered w3-code\" style= {{border: \"3px solid\"}}>\n         Movies watched <br/>\n         <input type =\"button\" value = \"Subscribe to new movie\" onClick = {() => openSubscribe(index)} />\n         {console.log(subClicked[index])}\n         {(subClicked[index] ? <SubscribeMovie index = {index} item = {item} movies = {splitMoviesToMembers(item._id)}/> : \"asda\")}\n\n        <ul>\n        {subscriptionItems(index,item)}\n        </ul>\n         </div>\n        </div>\n      })\n\n    return(\n       <div>\n       {x}\n       {items}\n       </div>\n    ) \n\n      \n\n      // const addItem = () =>{\n      //   setItem([...item,{id: item.length}])\n      // }\n\n    // return(\n    //   <div>\n    //     <button onClick = {addItem}>Add number</button>\n    //     <ul>\n    //       {item.map(item => (\n    //         <li key = {item.id} >{item.id}</li>\n    //       ))}\n    //     </ul>\n    //   </div>\n    // )\n}\n\nexport default AllMembers\n"]},"metadata":{},"sourceType":"module"}